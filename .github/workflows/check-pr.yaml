name: Check PR

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize

jobs:
  generate-matrix:
    name: Generate job matrices
    runs-on: ubuntu-20.04

    outputs:
      packages-matrix: ${{ steps.packages-matrix.outputs.matrix }}

    steps:
      - name: Generate packages matrix
        id: packages-matrix
        uses: hellofresh/action-changed-files@v2
        with:
          pattern: src/(?P<package>[^/]+)/

  check-root:
    name: Check root
    runs-on: ubuntu-20.04

    permissions:
      contents: read

    strategy:
      matrix:
        python-version: ["3.11"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install dependencies
        run: |
          make ci-init

      - name: Lint PR
        run: |
          make lint

      - name: Test PR
        run: |
          make test

  check-package:
    name: Check package
    runs-on: ubuntu-20.04
    needs: [generate-matrix]
    if: ${{ fromJson(needs.generate-matrix.outputs.packages-matrix).include[0] }}

    strategy:
      matrix:
        package: ${{ fromJson(needs.generate-matrix.outputs.packages-matrix).include[*].package }}
        python-version: ["3.11"]
      fail-fast: false

    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install repository dependencies
        run: |
          make ci-init

      - name: Install package dependencies
        working-directory: src/${{ matrix.package }}
        run: |
          make init

      - name: Lint Package
        working-directory: src/${{ matrix.package }}
        run: |
          make lint

      - name: Test Package
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          POSTGRES_DRIVER: ${{ vars.POSTGRES_DRIVER }}
          POSTGRES_HOST: ${{ vars.POSTGRES_HOST }}
          POSTGRES_PORT: ${{ vars.POSTGRES_PORT }}
          POSTGRES_USER: ${{ vars.POSTGRES_USER }}
          NGINX_PORT: ${{ vars.NGINX_PORT }}
          API_HOST: ${{ vars.API_HOST }}
          API_PORT: ${{ vars.API_PORT }}
          APP_RELOAD: ${{ vars.APP_RELOAD }}
          PROXY1_HOST: ${{ secrets.PROXY1_HOST }}
          PROXY1_PORT: ${{ secrets.PROXY1_PORT }}
          PROXY1_USER: ${{ secrets.PROXY1_USER }}
          PROXY1_PASSWORD: ${{ secrets.PROXY1_PASSWORD }}
          PROXY1_ENABLE: ${{ vars.PROXY1_ENABLE }}
          VK_BASE_URL: ${{ vars.VK_BASE_URL }}
          VK1_VERSION: ${{ vars.VK1_VERSION }}
          VK1_TOKEN: ${{ secrets.VK1_TOKEN }}
          VK2_VERSION: ${{ vars.VK2_VERSION }}
          VK2_TOKEN: ${{ secrets.VK2_TOKEN }}
          VK3_VERSION: ${{ vars.VK3_VERSION }}
          VK3_TOKEN: ${{ secrets.VK3_TOKEN }}
          TG1_NAME: ${{ secrets.TG1_NAME }}
          TG1_API_ID: ${{ secrets.TG1_API_ID }}
          TG1_API_HASH: ${{ secrets.TG1_API_HASH }}
          TG1_PHONE_NUMBER: ${{ secrets.TG1_PHONE_NUMBER }}
          TG2_NAME: ${{ secrets.TG2_NAME }}
          TG2_API_ID: ${{ secrets.TG2_API_ID }}
          TG2_API_HASH: ${{ secrets.TG2_API_HASH }}
          TG2_BOT_TOKEN: ${{ secrets.TG2_BOT_TOKEN }}
          TG3_NAME: ${{ secrets.TG3_NAME }}
          TG3_API_ID: ${{ secrets.TG3_API_ID }}
          TG3_API_HASH: ${{ secrets.TG3_API_HASH }}
          TG3_PHONE_NUMBER: ${{ secrets.TG3_PHONE_NUMBER }}
          TG4_NAME: ${{ secrets.TG4_NAME }}
          TG4_API_ID: ${{ secrets.TG4_API_ID }}
          TG4_API_HASH: ${{ secrets.TG4_API_HASH }}
          TG4_BOT_TOKEN: ${{ secrets.TG4_BOT_TOKEN }}
          TG5_NAME: ${{ secrets.TG5_NAME }}
          TG5_API_ID: ${{ secrets.TG5_API_ID }}
          TG5_API_HASH: ${{ secrets.TG5_API_HASH }}
          TG5_BOT_TOKEN: ${{ secrets.TG5_BOT_TOKEN }}
          TG6_NAME: ${{ secrets.TG6_NAME }}
          TG6_API_ID: ${{ secrets.TG6_API_ID }}
          TG6_API_HASH: ${{ secrets.TG6_API_HASH }}
          TG6_BOT_TOKEN: ${{ secrets.TG6_BOT_TOKEN }}
          TG7_NAME: ${{ secrets.TG7_NAME }}
          TG7_API_ID: ${{ secrets.TG7_API_ID }}
          TG7_API_HASH: ${{ secrets.TG7_API_HASH }}
          TG7_BOT_TOKEN: ${{ secrets.TG7_BOT_TOKEN }}
          OK_ACCESS_TOKEN: ${{ secrets.OK_ACCESS_TOKEN }}
          OK_APPLICATION_KEY: ${{ secrets.OK_APPLICATION_KEY }}
          OK_APPLICATION_SECRET_KEY: ${{ secrets.OK_APPLICATION_SECRET_KEY }}
        working-directory: src/${{ matrix.package }}
        run: |
          make ci-test

  results:
    if: ${{ always() }}
    runs-on: ubuntu-20.04
    name: Final Results
    needs: [check-package]
    steps:
      - run: |
          result="${{ needs.check-package.result }}"
          if [[ $result == "success" || $result == "skipped" ]]; then
            exit 0
          else
            exit 1
          fi
